# Generated by Django 3.0.3 on 2020-08-14 21:30

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import extend.forms
import mptt.fields
import smart_selects.db_fields
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('extend', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='DeviceRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('slug', models.SlugField(unique=True)),
                ('description', models.CharField(blank=True, max_length=100)),
                ('color', extend.forms.ColorField(max_length=6)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('slug', models.SlugField(unique=True)),
                ('physical_address', models.CharField(blank=True, max_length=200)),
                ('description', models.CharField(blank=True, max_length=100)),
                ('comment', models.TextField(blank=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Platform',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(max_length=100, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('slug', models.SlugField(unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VendorModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('model', models.CharField(max_length=50)),
                ('slug', models.SlugField()),
                ('u_height', models.PositiveSmallIntegerField(default=1, verbose_name='Height (U)')),
                ('depth', models.BooleanField(default=True, help_text='Default is Full Depth', verbose_name='Full Depth')),
                ('front_image', models.ImageField(blank=True, upload_to='imgs-devicemodel')),
                ('rear_image', models.ImageField(blank=True, upload_to='imgs-devicemodel')),
                ('comment', models.TextField(blank=True)),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='device_models', to='organisation.Vendor')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('slug', models.SlugField(unique=True)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='organisation.Region')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Rack',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=50)),
                ('u_height', models.PositiveSmallIntegerField(default=44, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)], verbose_name='Unit Height')),
                ('desc_units', models.BooleanField(default=False, help_text='По умолчанию нумерация юнитов снизу вверх', verbose_name='Top to buttom')),
                ('racktype', models.CharField(choices=[('1-frame', 'Открытая стойка однорамочная'), ('2-frame', 'Открытая стойка двухрамочная'), ('wall-cabinet', 'Серверный шкаф настенный'), ('floor-cabinet', 'Серверный шкаф напольный')], default='floor-cabinet', max_length=50)),
                ('comment', models.TextField(blank=True)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='racks', to='organisation.Location')),
            ],
            options={
                'ordering': ('location', 'name', 'pk'),
            },
        ),
        migrations.AddField(
            model_name='location',
            name='region',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='locations', to='organisation.Region'),
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('serial', models.CharField(blank=True, max_length=50, verbose_name='Серийный номер')),
                ('position', models.PositiveSmallIntegerField(blank=True, help_text='Номер юнита с которого начинается размещение оборудование в стойке', null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Номер юнита')),
                ('face_position', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Размещено на лицевой стороне стойки'), (0, 'Размещено на обратной стороне стойки')], default=1, null=True)),
                ('description', models.CharField(blank=True, max_length=100)),
                ('comment', models.TextField(blank=True)),
                ('device_model', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='instances', to='organisation.VendorModel')),
                ('device_role', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='devices', to='organisation.DeviceRole')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='devices', to='organisation.Location')),
                ('platform', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='devices', to='organisation.Platform')),
                ('rack', smart_selects.db_fields.ChainedForeignKey(auto_choose=True, chained_field='location', chained_model_field='location', on_delete=django.db.models.deletion.CASCADE, related_name='devices', to='organisation.Rack')),
                ('tag', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='extend.TaggedItem', to='extend.Tag', verbose_name='Tags')),
            ],
            options={
                'ordering': ('name', 'pk'),
            },
        ),
    ]
